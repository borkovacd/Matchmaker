{"ast":null,"code":"import CONFIG from \"../config\";\nimport HttpMethod from \"../constants/HttpMethod\";\nimport { request } from \"./HTTP\";\nimport history from \"../history\";\nexport async function login(username, password) {\n  clearUserData();\n  let data = {\n    client_id: CONFIG.clientId,\n    client_secret: CONFIG.clientSecret,\n    grant_type: \"password\",\n    username: username,\n    password: password\n  };\n  return await request(\"/oauth/v2/token\", data, HttpMethod.GET, false).then(response => {\n    if (!response.ok) {\n      return response;\n    }\n\n    setTokenToLocalStorage(response.data.access_token, response.data.refresh_token);\n    return request(\"/user/current\").then(response => {\n      if (response.data.user) {\n        setUserToLocalStorage(response.data.user);\n      }\n\n      return response;\n    });\n  });\n}\nexport async function socialLogin(provider, email, firstName, lastName, socialId, accessToken, expiresAt) {\n  let data = {\n    provider: provider,\n    email: email,\n    firstName: firstName ? firstName : \"\",\n    lastName: lastName ? lastName : \"\",\n    socialId: socialId,\n    accessToken: accessToken,\n    expiresAt: expiresAt\n  };\n  return await request(\"/social/authenticate\", data, HttpMethod.POST).then(response => {\n    if (!response.ok) {\n      return;\n    }\n\n    setSocialTokenToLocalStorage(response.data.access_token);\n    return request(\"/user/current\").then(response => {\n      if (response.data.user) {\n        setUserToLocalStorage(response.data.user);\n      }\n\n      return response;\n    });\n  });\n}\nexport async function refreshToken(refreshToken) {\n  let data = {\n    client_id: CONFIG.clientId,\n    client_secret: CONFIG.clientSecret,\n    grant_type: \"refresh_token\",\n    refresh_token: refreshToken\n  };\n  return await request(\"/oauth/v2/token\", data, HttpMethod.GET, false).then(data => {\n    setTokenToLocalStorage(data.access_token, data.refresh_token);\n    return data.access_token !== undefined;\n  });\n}\nexport function logout() {\n  clearUserData();\n  history.push(\"/\");\n}\nexport function setUserToLocalStorage(user) {\n  localStorage.setItem(\"user\", JSON.stringify(user));\n}\nexport function getUserFromLocalStorage() {\n  let user = localStorage.getItem(\"user\");\n  return user ? JSON.parse(user) : null;\n}\nexport function setTokenToLocalStorage(access_token, refresh_token) {\n  localStorage.setItem(CONFIG.tokenKey, access_token);\n  localStorage.setItem(CONFIG.refreshTokenKey, refresh_token);\n}\nexport function setSocialTokenToLocalStorage(access_token) {\n  localStorage.setItem(CONFIG.socialTokenKey, access_token);\n}\nexport function clearUserData() {\n  localStorage.removeItem(\"user\");\n  localStorage.removeItem(CONFIG.tokenKey);\n  localStorage.removeItem(CONFIG.refreshTokenKey);\n}\nexport function getRefreshToken() {\n  return localStorage.getItem(CONFIG.refreshTokenKey);\n}\nexport function isUserLoggedIn() {\n  return getUserFromLocalStorage() != null;\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/Lilly021/GIT/Matchmaker/matchmaker/src/base/OAuth.js"],"names":["CONFIG","HttpMethod","request","history","login","username","password","clearUserData","data","client_id","clientId","client_secret","clientSecret","grant_type","GET","then","response","ok","setTokenToLocalStorage","access_token","refresh_token","user","setUserToLocalStorage","socialLogin","provider","email","firstName","lastName","socialId","accessToken","expiresAt","POST","setSocialTokenToLocalStorage","refreshToken","undefined","logout","push","localStorage","setItem","JSON","stringify","getUserFromLocalStorage","getItem","parse","tokenKey","refreshTokenKey","socialTokenKey","removeItem","getRefreshToken","isUserLoggedIn"],"mappings":"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","sourcesContent":["import CONFIG from \"../config\";\r\nimport HttpMethod from \"../constants/HttpMethod\";\r\nimport { request } from \"./HTTP\";\r\nimport history from \"../history\";\r\n\r\nexport async function login(username, password) {\r\n  clearUserData();\r\n\r\n  let data = {\r\n    client_id: CONFIG.clientId,\r\n    client_secret: CONFIG.clientSecret,\r\n    grant_type: \"password\",\r\n    username: username,\r\n    password: password,\r\n  };\r\n\r\n  return await request(\"/oauth/v2/token\", data, HttpMethod.GET, false).then(\r\n    (response) => {\r\n      if (!response.ok) {\r\n        return response;\r\n      }\r\n\r\n      setTokenToLocalStorage(\r\n        response.data.access_token,\r\n        response.data.refresh_token\r\n      );\r\n\r\n      return request(\"/user/current\").then((response) => {\r\n        if (response.data.user) {\r\n          setUserToLocalStorage(response.data.user);\r\n        }\r\n\r\n        return response;\r\n      });\r\n    }\r\n  );\r\n}\r\n\r\nexport async function socialLogin(\r\n  provider,\r\n  email,\r\n  firstName,\r\n  lastName,\r\n  socialId,\r\n  accessToken,\r\n  expiresAt\r\n) {\r\n  let data = {\r\n    provider: provider,\r\n    email: email,\r\n    firstName: firstName ? firstName : \"\",\r\n    lastName: lastName ? lastName : \"\",\r\n    socialId: socialId,\r\n    accessToken: accessToken,\r\n    expiresAt: expiresAt,\r\n  };\r\n\r\n  return await request(\"/social/authenticate\", data, HttpMethod.POST).then(\r\n    (response) => {\r\n      if (!response.ok) {\r\n        return;\r\n      }\r\n\r\n      setSocialTokenToLocalStorage(response.data.access_token);\r\n\r\n      return request(\"/user/current\").then((response) => {\r\n        if (response.data.user) {\r\n          setUserToLocalStorage(response.data.user);\r\n        }\r\n\r\n        return response;\r\n      });\r\n    }\r\n  );\r\n}\r\n\r\nexport async function refreshToken(refreshToken) {\r\n  let data = {\r\n    client_id: CONFIG.clientId,\r\n    client_secret: CONFIG.clientSecret,\r\n    grant_type: \"refresh_token\",\r\n    refresh_token: refreshToken,\r\n  };\r\n\r\n  return await request(\"/oauth/v2/token\", data, HttpMethod.GET, false).then(\r\n    (data) => {\r\n      setTokenToLocalStorage(data.access_token, data.refresh_token);\r\n\r\n      return data.access_token !== undefined;\r\n    }\r\n  );\r\n}\r\n\r\nexport function logout() {\r\n  clearUserData();\r\n  history.push(\"/\");\r\n}\r\n\r\nexport function setUserToLocalStorage(user) {\r\n  localStorage.setItem(\"user\", JSON.stringify(user));\r\n}\r\n\r\nexport function getUserFromLocalStorage() {\r\n  let user = localStorage.getItem(\"user\");\r\n  return user ? JSON.parse(user) : null;\r\n}\r\n\r\nexport function setTokenToLocalStorage(access_token, refresh_token) {\r\n  localStorage.setItem(CONFIG.tokenKey, access_token);\r\n  localStorage.setItem(CONFIG.refreshTokenKey, refresh_token);\r\n}\r\n\r\nexport function setSocialTokenToLocalStorage(access_token) {\r\n  localStorage.setItem(CONFIG.socialTokenKey, access_token);\r\n}\r\n\r\nexport function clearUserData() {\r\n  localStorage.removeItem(\"user\");\r\n  localStorage.removeItem(CONFIG.tokenKey);\r\n  localStorage.removeItem(CONFIG.refreshTokenKey);\r\n}\r\n\r\nexport function getRefreshToken() {\r\n  return localStorage.getItem(CONFIG.refreshTokenKey);\r\n}\r\n\r\nexport function isUserLoggedIn() {\r\n  return getUserFromLocalStorage() != null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}