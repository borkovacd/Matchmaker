{"ast":null,"code":"import React, { Component } from 'react';\nimport { validate, isFormValid } from '../functions/Validation';\nimport BaseComponent from \"../common/BaseComponent\";\nimport update from 'immutability-helper';\n\nclass FormComponent extends BaseComponent {\n  constructor(props) {\n    super(props);\n    this.validationList = {};\n    this.state = {\n      data: {},\n      errors: {}\n    };\n    this.changeData = this.changeData.bind(this);\n    this.changeCheckBox = this.changeCheckBox.bind(this);\n    this.validate = this.validate.bind(this);\n  }\n\n  changeData(event) {\n    this.setState({\n      data: update(this.state.data, {\n        [event.target.name]: {\n          $set: event.target.value\n        }\n      })\n    });\n  }\n\n  changeCheckBox(event) {\n    const field = event.target.name;\n    const data = this.state.data;\n    data[field] = !data[field];\n    this.setState({\n      data\n    });\n  }\n\n  isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  isFloat(n) {\n    return !isNaN(parseFloat(n));\n  }\n\n  isInt(n) {\n    return isFinite(n);\n  }\n\n  validate() {\n    let errors = validate(this.state.data, this.validationList);\n    this.setState({\n      errors\n    });\n    return isFormValid(errors);\n  }\n\n  setError(key, value) {\n    this.setState({\n      errors: update(this.state.errors, {\n        [key]: {\n          $set: [{\n            message: value\n          }]\n        }\n      })\n    });\n  }\n\n}\n\nexport default FormComponent;","map":{"version":3,"sources":["C:/Users/User/Desktop/Lilly021/GIT/Matchmaker/matchmaker/src/common/FormComponent.js"],"names":["React","Component","validate","isFormValid","BaseComponent","update","FormComponent","constructor","props","validationList","state","data","errors","changeData","bind","changeCheckBox","event","setState","target","name","$set","value","field","isNumeric","n","isNaN","parseFloat","isFinite","isFloat","isInt","setError","key","message"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,QAAR,EAAkBC,WAAlB,QAAoC,yBAApC;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,MAAMC,aAAN,SAA4BF,aAA5B,CAA0C;AAItCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAFnBC,cAEmB,GAFF,EAEE;AAGf,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,EADG;AAETC,MAAAA,MAAM,EAAE;AAFC,KAAb;AAMA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKZ,QAAL,GAAgB,KAAKA,QAAL,CAAcY,IAAd,CAAmB,IAAnB,CAAhB;AACH;;AAEDD,EAAAA,UAAU,CAACG,KAAD,EAAQ;AAEd,SAAKC,QAAL,CAAc;AACVN,MAAAA,IAAI,EAAEN,MAAM,CAAC,KAAKK,KAAL,CAAWC,IAAZ,EAAkB;AAAE,SAACK,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqB;AAACC,UAAAA,IAAI,EAAEJ,KAAK,CAACE,MAAN,CAAaG;AAApB;AAAvB,OAAlB;AADF,KAAd;AAGH;;AAEDN,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAElB,UAAMM,KAAK,GAAGN,KAAK,CAACE,MAAN,CAAaC,IAA3B;AACA,UAAMR,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;AACAA,IAAAA,IAAI,CAACW,KAAD,CAAJ,GAAc,CAACX,IAAI,CAACW,KAAD,CAAnB;AAEA,SAAKL,QAAL,CAAc;AACVN,MAAAA;AADU,KAAd;AAGH;;AAEDY,EAAAA,SAAS,CAACC,CAAD,EAAI;AACT,WAAO,CAACC,KAAK,CAACC,UAAU,CAACF,CAAD,CAAX,CAAN,IAAyBG,QAAQ,CAACH,CAAD,CAAxC;AACH;;AAEDI,EAAAA,OAAO,CAACJ,CAAD,EAAI;AACP,WAAO,CAACC,KAAK,CAACC,UAAU,CAACF,CAAD,CAAX,CAAb;AACH;;AAEDK,EAAAA,KAAK,CAACL,CAAD,EAAI;AACL,WAAOG,QAAQ,CAACH,CAAD,CAAf;AACH;;AAEDtB,EAAAA,QAAQ,GAAI;AAER,QAAIU,MAAM,GAAGV,QAAQ,CAAC,KAAKQ,KAAL,CAAWC,IAAZ,EAAkB,KAAKF,cAAvB,CAArB;AAEA,SAAKQ,QAAL,CAAc;AAACL,MAAAA;AAAD,KAAd;AAEA,WAAOT,WAAW,CAACS,MAAD,CAAlB;AACH;;AAEDkB,EAAAA,QAAQ,CAACC,GAAD,EAAMV,KAAN,EAAa;AACjB,SAAKJ,QAAL,CAAc;AACVL,MAAAA,MAAM,EAAEP,MAAM,CAAC,KAAKK,KAAL,CAAWE,MAAZ,EAAoB;AAAE,SAACmB,GAAD,GAAO;AAACX,UAAAA,IAAI,EAAE,CAAE;AAAEY,YAAAA,OAAO,EAAEX;AAAX,WAAF;AAAP;AAAT,OAApB;AADJ,KAAd;AAGH;;AA7DqC;;AAgE1C,eAAef,aAAf","sourcesContent":["import React, {Component} from 'react'\r\nimport {validate, isFormValid} from '../functions/Validation';\r\nimport BaseComponent from \"../common/BaseComponent\";\r\nimport update from 'immutability-helper';\r\n\r\nclass FormComponent extends BaseComponent {\r\n\r\n    validationList = {};\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: {},\r\n            errors: {}\r\n\r\n        };\r\n\r\n        this.changeData = this.changeData.bind(this);\r\n        this.changeCheckBox = this.changeCheckBox.bind(this);\r\n        this.validate = this.validate.bind(this);\r\n    }\r\n\r\n    changeData(event) {\r\n\r\n        this.setState({\r\n            data: update(this.state.data, { [event.target.name]: {$set: event.target.value} })\r\n        });\r\n    }\r\n\r\n    changeCheckBox(event) {\r\n\r\n        const field = event.target.name;\r\n        const data = this.state.data;\r\n        data[field] = !data[field];\r\n\r\n        this.setState({\r\n            data\r\n        });\r\n    }\r\n\r\n    isNumeric(n) {\r\n        return !isNaN(parseFloat(n)) && isFinite(n);\r\n    }\r\n\r\n    isFloat(n) {\r\n        return !isNaN(parseFloat(n));\r\n    }\r\n\r\n    isInt(n) {\r\n        return isFinite(n)\r\n    }\r\n\r\n    validate () {\r\n\r\n        let errors = validate(this.state.data, this.validationList);\r\n\r\n        this.setState({errors});\r\n\r\n        return isFormValid(errors);\r\n    }\r\n\r\n    setError(key, value) {\r\n        this.setState({\r\n            errors: update(this.state.errors, { [key]: {$set: [ { message: value} ]} })\r\n        });\r\n    }\r\n}\r\n\r\nexport default FormComponent;"]},"metadata":{},"sourceType":"module"}