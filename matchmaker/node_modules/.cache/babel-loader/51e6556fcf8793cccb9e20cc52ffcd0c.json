{"ast":null,"code":"import strings from '../localization';\nimport ValidatorTypes from '../constants/ValidatorTypes';\nimport { isNumeric } from \"../util/DataValidation\";\nexport function hasError(errors, type) {\n  return errors[type] && errors[type].length > 0;\n}\nexport default function getErrorClass(errors, type) {\n  return hasError(errors, type) ? 'error' : '';\n}\nexport function validate(formData, validationList) {\n  let errors = {};\n\n  for (let propertyKey of Object.keys(validationList)) {\n    let fieldErrors = [];\n    validationList[propertyKey].forEach(validationItem => {\n      if (validationItem.type === ValidatorTypes.REQUIRED) {\n        if (!required(formData[propertyKey])) {\n          fieldErrors.push({\n            message: strings.validation.RequiredErrorMessage\n          });\n        }\n      } else if (validationItem.type === ValidatorTypes.MIN_LENGTH) {\n        if (!minLength(formData[propertyKey], validationItem.min)) {\n          fieldErrors.push({\n            message: `${strings.validation.MinLengthErrorMessage}${validationItem.min}`\n          });\n        }\n      } else if (validationItem.type === ValidatorTypes.MAX_LENGTH) {\n        if (!maxLength(formData[propertyKey], validationItem.max)) {\n          fieldErrors.push({\n            message: `${strings.validation.MaxLengthErrorMessage}${validationItem.max}`\n          });\n        }\n      } else if (validationItem.type === ValidatorTypes.EMAIL) {\n        if (!email(formData[propertyKey])) {\n          fieldErrors.push({\n            message: strings.validation.EmailErrorMessage\n          });\n        }\n      } else if (validationItem.type === ValidatorTypes.PASSWORD) {\n        if (!password(formData[propertyKey])) {\n          fieldErrors.push({\n            message: strings.validation.PasswordErrorMessage\n          });\n        }\n      } else if (validationItem.type === ValidatorTypes.NOT_EMPTY_ARRAY) {\n        if (!notEmptyArray(formData[propertyKey])) {\n          fieldErrors.push({\n            message: strings.validation.RequiredErrorMessage\n          });\n        }\n      } else if (validationItem.type === ValidatorTypes.SELECTED_OPTION) {\n        if (!formData[propertyKey] || formData[propertyKey] == '-1') {\n          fieldErrors.push({\n            message: strings.validation.RequiredErrorMessage\n          });\n        }\n      } else if (validationItem.type === ValidatorTypes.IS_NUMBER) {\n        if (!isNumeric(formData[propertyKey])) {\n          fieldErrors.push({\n            message: strings.validation.notNumber\n          });\n        }\n      }\n    });\n    errors[propertyKey] = fieldErrors;\n  }\n\n  return errors;\n}\n\nfunction notEmptyArray(data) {\n  return !(!data || data.length === 0);\n}\n\nfunction required(data) {\n  return !(!data || data === '');\n}\n\nfunction minLength(data, minLength) {\n  return data && data.length >= minLength;\n}\n\nfunction maxLength(data, maxLength) {\n  return data && data.length <= maxLength;\n}\n\nfunction email(data) {\n  let regexp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return regexp.test(data);\n}\n\nfunction password(data) {\n  let regexp = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,}$/;\n  return regexp.test(data);\n}\n\nexport function isFormValid(errors) {\n  for (let key in errors) {\n    let error = errors[key];\n\n    if (error.length !== 0) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/Lilly021/GIT/Matchmaker/matchmaker/src/functions/Validation.js"],"names":["strings","ValidatorTypes","isNumeric","hasError","errors","type","length","getErrorClass","validate","formData","validationList","propertyKey","Object","keys","fieldErrors","forEach","validationItem","REQUIRED","required","push","message","validation","RequiredErrorMessage","MIN_LENGTH","minLength","min","MinLengthErrorMessage","MAX_LENGTH","maxLength","max","MaxLengthErrorMessage","EMAIL","email","EmailErrorMessage","PASSWORD","password","PasswordErrorMessage","NOT_EMPTY_ARRAY","notEmptyArray","SELECTED_OPTION","IS_NUMBER","notNumber","data","regexp","test","isFormValid","key","error"],"mappings":"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","sourcesContent":["import strings from '../localization';\r\nimport ValidatorTypes from '../constants/ValidatorTypes';\r\nimport {isNumeric} from \"../util/DataValidation\";\r\n\r\n\r\nexport  function hasError(errors, type) {\r\n    return errors[type] && errors[type].length > 0;\r\n}\r\n\r\nexport default function getErrorClass(errors, type) {\r\n    return hasError(errors, type) ? 'error' : '';\r\n}\r\n\r\nexport function validate(formData, validationList) {\r\n\r\n    let errors = {};\r\n\r\n    for (let propertyKey of Object.keys(validationList)) {\r\n\r\n        let fieldErrors = [];\r\n\r\n        validationList[propertyKey].forEach((validationItem) => {\r\n\r\n            if (validationItem.type === ValidatorTypes.REQUIRED) {\r\n                if (!required(formData[propertyKey])) {\r\n\r\n                    fieldErrors.push(\r\n                        {\r\n                            message: strings.validation.RequiredErrorMessage\r\n                        });\r\n                }\r\n            }\r\n            else if (validationItem.type === ValidatorTypes.MIN_LENGTH) {\r\n                if (!minLength(formData[propertyKey], validationItem.min)) {\r\n                    fieldErrors.push(\r\n                        {\r\n                            message: `${strings.validation.MinLengthErrorMessage}${validationItem.min}`\r\n                        });\r\n                }\r\n\r\n            }\r\n            else if (validationItem.type === ValidatorTypes.MAX_LENGTH) {\r\n                if (!maxLength(formData[propertyKey], validationItem.max)) {\r\n                    fieldErrors.push(\r\n                        {\r\n                            message: `${strings.validation.MaxLengthErrorMessage}${validationItem.max}`\r\n                        });\r\n                }\r\n            }\r\n            else if (validationItem.type === ValidatorTypes.EMAIL) {\r\n                if (!email(formData[propertyKey])) {\r\n                    fieldErrors.push(\r\n                        {\r\n                            message: strings.validation.EmailErrorMessage\r\n                        });\r\n                }\r\n            }\r\n            else if (validationItem.type === ValidatorTypes.PASSWORD) {\r\n                if (!password(formData[propertyKey])) {\r\n                    fieldErrors.push(\r\n                        {\r\n                            message: strings.validation.PasswordErrorMessage\r\n                        });\r\n                }\r\n            }\r\n            else if (validationItem.type === ValidatorTypes.NOT_EMPTY_ARRAY) {\r\n                if (!notEmptyArray(formData[propertyKey])) {\r\n                    fieldErrors.push(\r\n                        {\r\n                            message: strings.validation.RequiredErrorMessage\r\n                        });\r\n                }\r\n            }\r\n            else if (validationItem.type === ValidatorTypes.SELECTED_OPTION) {\r\n\r\n                if (!formData[propertyKey] || formData[propertyKey] == '-1') {\r\n                    fieldErrors.push(\r\n                        {\r\n                            message: strings.validation.RequiredErrorMessage\r\n                        });\r\n                }\r\n            }\r\n            else if (validationItem.type === ValidatorTypes.IS_NUMBER) {\r\n\r\n                if (!isNumeric(formData[propertyKey])) {\r\n                    fieldErrors.push(\r\n                        {\r\n                            message: strings.validation.notNumber\r\n                        });\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        errors[propertyKey] = fieldErrors;\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nfunction notEmptyArray(data) {\r\n    return !(!data || data.length === 0);\r\n}\r\n\r\nfunction required(data) {\r\n    return !(!data || data === '');\r\n}\r\n\r\nfunction minLength(data, minLength) {\r\n    return data && data.length >= minLength;\r\n}\r\n\r\nfunction maxLength(data, maxLength) {\r\n    return data && data.length <= maxLength;\r\n}\r\n\r\nfunction email(data) {\r\n    let regexp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return regexp.test(data);\r\n}\r\n\r\nfunction password(data) {\r\n    let regexp = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,}$/;\r\n    return regexp.test(data);\r\n}\r\n\r\nexport function isFormValid(errors) {\r\n    for (let key in errors) {\r\n        let error = errors[key];\r\n        if (error.length !== 0){\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"]},"metadata":{},"sourceType":"module"}