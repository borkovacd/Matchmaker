{"ast":null,"code":"import CONFIG from \"../config\";\nimport AuthenticationTypes from \"../constants/AuthenticationTypes\";\nimport HttpMethod from \"../constants/HttpMethod\";\nimport history from \"../history\";\nimport { clearUserData } from \"./OAuth\";\nimport axios from \"axios\";\n\nconst Axios = function () {\n  let instance;\n\n  function createInstance() {\n    return axios.create({\n      baseURL: CONFIG.baseUrl\n    });\n  }\n\n  return {\n    getInstance: function () {\n      if (!instance) {\n        instance = createInstance();\n      }\n\n      if (getTokenType()) {\n        instance.defaults.headers.common[\"Authorization\"] = getToken();\n      }\n\n      instance.all = axios.all;\n      return instance;\n    }\n  };\n}();\n\nlet refreshing = false;\nAxios.getInstance().interceptors.response.use(response => {\n  response.ok = response.status >= 200 && response.status < 300;\n  return response;\n}, async error => {\n  const {\n    response: {\n      status\n    }\n  } = error;\n\n  if (status === 404) {\n    history.push(\"/not-found\");\n  } else if (status === 500) {\n    history.push(\"/error\");\n  } else if (status === 401) {\n    history.push(\"/forbidden\");\n  } else if (status === 403) {\n    clearUserData();\n    history.push(\"/\");\n    return error;\n  }\n\n  return error;\n});\nexport async function request(url, data = [], method = HttpMethod.GET, options = {}) {\n  return await connect(url, data, method, options);\n}\nexport async function requestFile(url, data = [], method = HttpMethod.GET) {\n  try {\n    let tokenType = getTokenType();\n    let headers = {\n      \"Access-Control-Allow-Credentials\": \"true\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Headers\": \"Authorization\",\n      Accept: \"application/json\"\n    };\n\n    if (tokenType) {\n      headers[\"Authorization\"] = getToken();\n    }\n\n    return await connect(CONFIG.baseUrl + url, headers, data, method, false);\n  } catch (error) {\n    history.push(\"/error\");\n  }\n}\nexport async function connect(url, data, method, options) {\n  switch (method) {\n    case HttpMethod.GET:\n      {\n        return await Axios.getInstance().get(url + makeParametersList(data), options);\n      }\n\n    case HttpMethod.POST:\n      return Axios.getInstance().post(url, data, options);\n\n    case HttpMethod.PUT:\n      return Axios.getInstance().put(url, data, options);\n\n    case HttpMethod.DELETE:\n      return Axios.getInstance().delete(url, options);\n  }\n}\nexport function makeParametersList(parameters) {\n  let parametersList = `?`;\n  Object.keys(parameters).map((key, index) => parametersList += `${key}=${parameters[key]}&`);\n  parametersList = parametersList.slice(0, -1);\n  return parametersList === \"?\" ? \"\" : parametersList;\n}\nexport function getToken() {\n  if (getTokenType() === AuthenticationTypes.BearerToken) {\n    return \"Bearer \" + localStorage.getItem(CONFIG.tokenKey);\n  } else if (getTokenType() === AuthenticationTypes.SocialToken) {\n    return \"Social \" + localStorage.getItem(CONFIG.socialTokenKey);\n  }\n\n  return \"\";\n}\nexport function getUserFromLocalStorage() {\n  let user = localStorage.getItem(\"user\");\n  return user ? JSON.parse(user) : null;\n}\n\nfunction getTokenType() {\n  if (localStorage.getItem(CONFIG.tokenKey)) {\n    return AuthenticationTypes.BearerToken;\n  } else if (localStorage.getItem(CONFIG.socialTokenKey)) {\n    return AuthenticationTypes.SocialToken;\n  }\n\n  return null;\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/Lilly021/GIT/Matchmaker/matchmaker/src/base/HTTP.js"],"names":["CONFIG","AuthenticationTypes","HttpMethod","history","clearUserData","axios","Axios","instance","createInstance","create","baseURL","baseUrl","getInstance","getTokenType","defaults","headers","common","getToken","all","refreshing","interceptors","response","use","ok","status","error","push","request","url","data","method","GET","options","connect","requestFile","tokenType","Accept","get","makeParametersList","POST","post","PUT","put","DELETE","delete","parameters","parametersList","Object","keys","map","key","index","slice","BearerToken","localStorage","getItem","tokenKey","SocialToken","socialTokenKey","getUserFromLocalStorage","user","JSON","parse"],"mappings":"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","sourcesContent":["import CONFIG from \"../config\";\r\nimport AuthenticationTypes from \"../constants/AuthenticationTypes\";\r\nimport HttpMethod from \"../constants/HttpMethod\";\r\nimport history from \"../history\";\r\nimport { clearUserData } from \"./OAuth\";\r\nimport axios from \"axios\";\r\n\r\nconst Axios = (function() {\r\n  let instance;\r\n\r\n  function createInstance() {\r\n    return axios.create({\r\n      baseURL: CONFIG.baseUrl\r\n    });\r\n  }\r\n\r\n  return {\r\n    getInstance: function() {\r\n      if (!instance) {\r\n        instance = createInstance();\r\n      }\r\n\r\n      if (getTokenType()) {\r\n        instance.defaults.headers.common[\"Authorization\"] = getToken();\r\n      }\r\n      instance.all = axios.all;\r\n\r\n      return instance;\r\n    }\r\n  };\r\n})();\r\n\r\nlet refreshing = false;\r\n\r\nAxios.getInstance().interceptors.response.use(\r\n  response => {\r\n    response.ok = response.status >= 200 && response.status < 300;\r\n\r\n    return response;\r\n  },\r\n  async error => {\r\n    const {\r\n      response: { status }\r\n    } = error;\r\n\r\n    if (status === 404) {\r\n      history.push(\"/not-found\");\r\n    } else if (status === 500) {\r\n      history.push(\"/error\");\r\n    } else if (status === 401) {\r\n      history.push(\"/forbidden\");\r\n    } else if (status === 403) {\r\n      clearUserData();\r\n      history.push(\"/\");\r\n      return error;\r\n    }\r\n\r\n    return error;\r\n  }\r\n);\r\n\r\nexport async function request(\r\n  url,\r\n  data = [],\r\n  method = HttpMethod.GET,\r\n  options = {}\r\n) {\r\n  return await connect(url, data, method, options);\r\n}\r\n\r\nexport async function requestFile(url, data = [], method = HttpMethod.GET) {\r\n  try {\r\n    let tokenType = getTokenType();\r\n\r\n    let headers = {\r\n      \"Access-Control-Allow-Credentials\": \"true\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Headers\": \"Authorization\",\r\n      Accept: \"application/json\"\r\n    };\r\n\r\n    if (tokenType) {\r\n      headers[\"Authorization\"] = getToken();\r\n    }\r\n\r\n    return await connect(CONFIG.baseUrl + url, headers, data, method, false);\r\n  } catch (error) {\r\n    history.push(\"/error\");\r\n  }\r\n}\r\n\r\nexport async function connect(url, data, method, options) {\r\n  switch (method) {\r\n    case HttpMethod.GET: {\r\n      return await Axios.getInstance().get(\r\n        url + makeParametersList(data),\r\n        options\r\n      );\r\n    }\r\n    case HttpMethod.POST:\r\n      return Axios.getInstance().post(url, data, options);\r\n    case HttpMethod.PUT:\r\n      return Axios.getInstance().put(url, data, options);\r\n    case HttpMethod.DELETE:\r\n      return Axios.getInstance().delete(url, options);\r\n  }\r\n}\r\n\r\nexport function makeParametersList(parameters) {\r\n  let parametersList = `?`;\r\n\r\n  Object.keys(parameters).map(\r\n    (key, index) => (parametersList += `${key}=${parameters[key]}&`)\r\n  );\r\n\r\n  parametersList = parametersList.slice(0, -1);\r\n\r\n  return parametersList === \"?\" ? \"\" : parametersList;\r\n}\r\n\r\nexport function getToken() {\r\n  if (getTokenType() === AuthenticationTypes.BearerToken) {\r\n    return \"Bearer \" + localStorage.getItem(CONFIG.tokenKey);\r\n  } else if (getTokenType() === AuthenticationTypes.SocialToken) {\r\n    return \"Social \" + localStorage.getItem(CONFIG.socialTokenKey);\r\n  }\r\n\r\n  return \"\";\r\n}\r\n\r\nexport function getUserFromLocalStorage() {\r\n  let user = localStorage.getItem(\"user\");\r\n  return user ? JSON.parse(user) : null;\r\n}\r\n\r\nfunction getTokenType() {\r\n  if (localStorage.getItem(CONFIG.tokenKey)) {\r\n    return AuthenticationTypes.BearerToken;\r\n  } else if (localStorage.getItem(CONFIG.socialTokenKey)) {\r\n    return AuthenticationTypes.SocialToken;\r\n  }\r\n\r\n  return null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}