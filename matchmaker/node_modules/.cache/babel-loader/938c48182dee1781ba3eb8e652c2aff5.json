{"ast":null,"code":"import FormComponent from \"./FormComponent\";\n\nclass Page extends FormComponent {\n  constructor(props) {\n    super(props);\n    this.params = [];\n    this.page = undefined;\n    this.setPage = this.setPage.bind(this);\n  }\n\n  componentWillMount() {\n    this.loadParams();\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(props) {\n    if (!this.needRefresh()) {\n      return;\n    }\n\n    this.fetchData();\n  }\n\n  fetchData() {}\n\n  componentDidUpdate() {\n    window.scrollTo(0, 0);\n  }\n\n  getSearchParam(param) {\n    let url = new URL(window.location);\n    return url.searchParams.get(param);\n  }\n\n  loadParams(data = \"searchData\") {\n    let loadedData = {};\n\n    for (let param of this.params) {\n      let paramString = this.getSearchParam(param.name);\n      let value;\n\n      if (!paramString || paramString === \"\") {\n        if (this.props[param.name]) {\n          loadedData[param.name] = this.props[param.name];\n        } else {\n          loadedData[param.name] = param.default;\n        }\n\n        continue;\n      }\n\n      if (paramString.includes(\",\")) {\n        value = [];\n\n        for (let item of paramString.split(\",\")) {\n          if (this.isNumeric(item)) {\n            if (this.isFloat(item)) {\n              value.push(parseFloat(item));\n            } else if (this.isInt(item)) {\n              value.push(parseInt(item));\n            }\n          }\n        }\n      } else if (this.isNumeric(paramString)) {\n        if (this.isFloat(paramString)) {\n          value = parseFloat(paramString);\n        } else if (this.isInt(paramString)) {\n          value = parseInt(paramString);\n        }\n      } else {\n        value = paramString;\n      }\n\n      loadedData[param.name] = value;\n      console.log(value);\n    }\n\n    this.state[data] = loadedData;\n  }\n\n  buildParams(data = \"searchData\") {\n    let result = \"?\";\n    let hasParams = false;\n\n    for (let param of this.params) {\n      if (this.state[data][param.name]) {\n        result += this.buildParam(param, this.state[data], hasParams);\n        hasParams = true;\n      }\n    }\n\n    return hasParams ? result : \"\";\n  }\n\n  buildParam(param, data, hasParams) {\n    let result = param.name + \"=\";\n\n    if (hasParams) {\n      result = \"&\" + result;\n    }\n\n    if (Array.isArray(data[param.name])) {\n      result += data[param.name].join();\n    } else {\n      result += data[param.name];\n    }\n\n    return result;\n  }\n\n  needRefresh(data = \"searchData\") {\n    const oldParams = JSON.parse(JSON.stringify(this.state[data]));\n    this.loadParams(data);\n\n    for (const [key, value] of Object.entries(this.state[data])) {\n      if (oldParams[key] != this.state[data][key]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  setPage(page) {\n    //console.log(\"PAGE:  \" + page);\n    //this.state.searchData.page = page;\n    this.props.history.push(this.page.path + this.buildParams());\n    this.props.history.push(this.buildParams());\n    this.fetchData();\n  }\n\n}\n\nexport default Page;","map":{"version":3,"sources":["C:/Users/User/Desktop/Lilly021/GIT/Matchmaker/matchmaker/src/common/Page.js"],"names":["FormComponent","Page","constructor","props","params","page","undefined","setPage","bind","componentWillMount","loadParams","fetchData","componentWillReceiveProps","needRefresh","componentDidUpdate","window","scrollTo","getSearchParam","param","url","URL","location","searchParams","get","data","loadedData","paramString","name","value","default","includes","item","split","isNumeric","isFloat","push","parseFloat","isInt","parseInt","console","log","state","buildParams","result","hasParams","buildParam","Array","isArray","join","oldParams","JSON","parse","stringify","key","Object","entries","history","path"],"mappings":"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","sourcesContent":["import FormComponent from \"./FormComponent\";\r\n\r\nclass Page extends FormComponent {\r\n  params = [];\r\n  page = undefined;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.setPage = this.setPage.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.loadParams();\r\n\r\n    this.fetchData();\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if (!this.needRefresh()) {\r\n      return;\r\n    }\r\n\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData() {}\r\n\r\n  componentDidUpdate() {\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  getSearchParam(param) {\r\n    let url = new URL(window.location);\r\n\r\n    return url.searchParams.get(param);\r\n  }\r\n\r\n  loadParams(data = \"searchData\") {\r\n    let loadedData = {};\r\n\r\n    for (let param of this.params) {\r\n      let paramString = this.getSearchParam(param.name);\r\n      let value;\r\n\r\n      if (!paramString || paramString === \"\") {\r\n        if (this.props[param.name]) {\r\n          loadedData[param.name] = this.props[param.name];\r\n        } else {\r\n          loadedData[param.name] = param.default;\r\n        }\r\n\r\n        continue;\r\n      }\r\n\r\n      if (paramString.includes(\",\")) {\r\n        value = [];\r\n\r\n        for (let item of paramString.split(\",\")) {\r\n          if (this.isNumeric(item)) {\r\n            if (this.isFloat(item)) {\r\n              value.push(parseFloat(item));\r\n            } else if (this.isInt(item)) {\r\n              value.push(parseInt(item));\r\n            }\r\n          }\r\n        }\r\n      } else if (this.isNumeric(paramString)) {\r\n        if (this.isFloat(paramString)) {\r\n          value = parseFloat(paramString);\r\n        } else if (this.isInt(paramString)) {\r\n          value = parseInt(paramString);\r\n        }\r\n      } else {\r\n        value = paramString;\r\n      }\r\n\r\n      loadedData[param.name] = value;\r\n\r\n      console.log(value);\r\n    }\r\n\r\n    this.state[data] = loadedData;\r\n  }\r\n\r\n  buildParams(data = \"searchData\") {\r\n    let result = \"?\";\r\n    let hasParams = false;\r\n\r\n    for (let param of this.params) {\r\n      if (this.state[data][param.name]) {\r\n        result += this.buildParam(param, this.state[data], hasParams);\r\n        hasParams = true;\r\n      }\r\n    }\r\n\r\n    return hasParams ? result : \"\";\r\n  }\r\n\r\n  buildParam(param, data, hasParams) {\r\n    let result = param.name + \"=\";\r\n\r\n    if (hasParams) {\r\n      result = \"&\" + result;\r\n    }\r\n\r\n    if (Array.isArray(data[param.name])) {\r\n      result += data[param.name].join();\r\n    } else {\r\n      result += data[param.name];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  needRefresh(data = \"searchData\") {\r\n    const oldParams = JSON.parse(JSON.stringify(this.state[data]));\r\n\r\n    this.loadParams(data);\r\n\r\n    for (const [key, value] of Object.entries(this.state[data])) {\r\n      if (oldParams[key] != this.state[data][key]) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  setPage(page) {\r\n    //console.log(\"PAGE:  \" + page);\r\n    //this.state.searchData.page = page;\r\n    this.props.history.push(this.page.path + this.buildParams());\r\n    this.props.history.push(this.buildParams());\r\n    this.fetchData();\r\n  }\r\n}\r\n\r\nexport default Page;\r\n"]},"metadata":{},"sourceType":"module"}